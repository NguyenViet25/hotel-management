name: Daily Auto PRs

on:
  schedule:
    - cron: '5 0 * * *' # Runs shortly after daily commits at 00:05 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  pr_and_merge_per_branch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [vinh, viet, tung, thinh]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity for commits
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Ensure branch exists and has initial commit if missing
        run: |
          set -e
          BRANCH='${{ matrix.branch }}'
          git fetch origin || true
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            echo "Branch $BRANCH exists on remote."
          else
            echo "Creating branch $BRANCH from main with bootstrap commit."
            # Create branch off main (if main exists remotely)
            if git ls-remote --exit-code --heads origin main >/dev/null 2>&1; then
              git checkout -B "$BRANCH" origin/main
            else
              git checkout -B "$BRANCH"
            fi
            mkdir -p daily-commits
            FILE="daily-commits/$BRANCH.md"
            touch "$FILE"
            echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) :: bootstrap" >> "$FILE"
            git add "$FILE"
            git commit -m "chore: bootstrap $BRANCH daily commit file"
            git push -u origin "$BRANCH"
          fi

      - name: Pre-sync branch with latest main to reduce conflicts
        run: |
          set -e
          BRANCH='${{ matrix.branch }}'
          git fetch origin main || true
          git checkout "$BRANCH"
          git merge --no-edit origin/main || true
          git push origin "$BRANCH"

      - name: Create or find PR for ${{ matrix.branch }} → main
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = '${{ matrix.branch }}';
            const base = 'main';

            // Verify the branch exists
            let branchExists = true;
            try {
              await github.repos.getBranch({ owner, repo, branch });
            } catch (e) {
              branchExists = false;
            }
            if (!branchExists) {
              core.info(`Branch ${branch} does not exist on remote. Skipping.`);
              core.setOutput('skip', 'true');
              return;
            }

            // Try to find an existing open PR
            const { data: openPRs } = await github.pulls.list({ owner, repo, state: 'open', base, per_page: 100 });
            let pr = openPRs.find(p => p.head && p.head.ref === branch);

            if (!pr) {
              const today = new Date().toISOString().slice(0, 10);
              const title = `Daily merge ${branch} → ${base} (${today})`;
              const body = 'Automated daily PR created by workflow.';
              try {
                const created = await github.pulls.create({ owner, repo, title, body, head: branch, base });
                pr = created.data;
                core.info(`Created PR #${pr.number} for ${branch}.`);
              } catch (e) {
                core.warning(`Failed to create PR for ${branch}: ${e.message}`);
                core.setOutput('skip', 'true');
                return;
              }
            } else {
              core.info(`Found existing PR #${pr.number} for ${branch}.`);
            }

            core.setOutput('skip', 'false');
            core.setOutput('pr_number', String(pr.number));

      - name: Attempt auto-merge PR
        id: merge_pr
        if: steps.create_pr.outputs.skip != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = Number('${{ steps.create_pr.outputs.pr_number }}');
            try {
              const res = await github.pulls.merge({ owner, repo, pull_number: prNumber, merge_method: 'squash' });
              core.info(`Merged PR #${prNumber}: ${res.status}`);
              core.setOutput('merged', 'true');
            } catch (e) {
              core.warning(`Auto-merge failed for PR #${prNumber}: ${e.message}`);
              core.setOutput('merged', 'false');
            }

      - name: Sync branch with latest main after successful merge
        if: steps.merge_pr.outputs.merged == 'true'
        run: |
          set -e
          BRANCH='${{ matrix.branch }}'
          git fetch origin main
          git checkout "$BRANCH"
          # Merge latest main into the author branch to keep it updated
          git merge --no-edit origin/main || true
          git push origin "$BRANCH"